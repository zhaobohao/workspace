#set($istree=false)
#foreach($field in $!{table.fields})
    #if($!{field.name}=="parent_id")
        #set($istree=true)
    #end
#endpackage $!{package.Controller};

import lombok.extern.slf4j.Slf4j;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.*;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import lombok.AllArgsConstructor;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springclouddev.core.mp.support.Condition;
import org.springclouddev.core.mp.support.Query;
import org.springclouddev.core.secure.SystemUser;
import org.springclouddev.core.tool.api.R;
import org.springclouddev.core.tool.constant.ToolConstant;
import org.springclouddev.core.tool.utils.Func;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestParam;
#if($!{superEntityClass})
import org.springframework.web.bind.annotation.RequestParam;
#end
import $!{package.Entity}.$!{entity};
#set($voPackage=$package.Entity.replace("entity","vo"))
import $!{voPackage}.$!{entity}VO;
#set($wrapperPackage=$package.Entity.replace("entity","wrapper"))
#if($!{cfg.hasWrapper})
import $!{wrapperPackage}.$!{entity}Wrapper;
#end
import $!{package.Service}.$!{table.serviceName};
#if($!{superControllerClassPackage})
import $!{superControllerClassPackage};
#end
#if(!$!{superEntityClass})
#end

/**
 * $!{table.comment} 控制器
 *
 * @author zhaobohao
 * @since $!{date}
 */
@RestController
@AllArgsConstructor
@Slf4j
@RequestMapping("#if($!{package.ModuleName})/$!{package.ModuleName}#end/$!{cfg.entityKey}")
@Api(value = "$!{table.comment}", tags = "$!{table.comment}接口")
#if($!{superControllerClass})
public class $!{table.controllerName} extends $!{superControllerClass} {
#else
public class $!{table.controllerName} {
#end

private $!{table.serviceName} $!{table.entityPath}Service;

#if($!{cfg.hasWrapper})
/**
 * 详情
 */
@GetMapping("/detail")
@ApiOperationSupport(order = 1)
@ApiOperation(value = "详情", notes = "传入$!{table.entityPath}")
public R<$!{entity}VO> detail($!{entity} $!{table.entityPath}) {
    $!{entity} detail = $!{table.entityPath}Service.getOne(Condition.getQueryWrapper($!{table.entityPath}));
    return R.data($!{entity}Wrapper.build().entityVO(detail));
    }

/**
 * 分页 $!{table.comment}
 */
@GetMapping("/list")
@ApiOperationSupport(order = 2)
@ApiOperation(value = "分页", notes = "传入$!{table.entityPath}")
public R<IPage<$!{entity}VO>> list($!{entity} $!{table.entityPath}, Query query) {
    IPage<$!{entity}> pages = $!{table.entityPath}Service.page(Condition.getPage(query), Condition.getQueryWrapper($!{table.entityPath}));
    return R.data($!{entity}Wrapper.build().pageVO(pages));
    }

#else
/**
 * 详情
 */
@GetMapping("/detail")
@ApiOperationSupport(order = 3)
@ApiOperation(value = "详情", notes = "传入$!{table.entityPath}")
public R<$!{entity}> detail($!{entity} $!{table.entityPath}) {
    $!{entity} detail = $!{table.entityPath}Service.getOne(Condition.getQueryWrapper($!{table.entityPath}));
    return R.data(detail);
    }

/**
 * 分页 $!{table.comment}
 */
@GetMapping("/list")
@ApiOperationSupport(order = 4)
@ApiOperation(value = "分页", notes = "传入$!{table.entityPath}")
public R<IPage<$!{entity}>> list($!{entity} $!{table.entityPath}, Query query) {
    IPage<$!{entity}> pages = $!{table.entityPath}Service.page(Condition.getPage(query), Condition.getQueryWrapper($!{table.entityPath}));
    return R.data(pages);
    }
#end

/**
 * 自定义分页 $!{table.comment}
 */
@GetMapping("/page")
@ApiOperationSupport(order = 5)
@ApiOperation(value = "分页", notes = "传入$!{table.entityPath}")
public R<IPage<$!{entity}VO>> page($!{entity}VO $!{table.entityPath}, Query query) {
    IPage<$!{entity}VO> pages = $!{table.entityPath}Service.select$!{entity}Page(Condition.getPage(query), $!{table.entityPath});
    return R.data(pages);
    }
/**
     * 列表
     */
@GetMapping("/list/page")
@ApiImplicitParams({
    @ApiImplicitParam(name = "roleName", value = "参数名称", paramType = "query", dataType = "string"),
    @ApiImplicitParam(name = "roleAlias", value = "角色别名", paramType = "query", dataType = "string"),
    @ApiImplicitParam(name = "parentId", value = "父id", paramType = "query", dataType = "string")
})
@ApiOperationSupport(order = 6)
@ApiOperation(value = "列表", notes = "传入$!{table.entityPath}")
public R<IPage<$!{entity}>> list(@ApiIgnore @RequestParam Map<String, Object> $!{table.entityPath}, Query query, SystemUser systemUser) {
    QueryWrapper<$!{entity}> queryWrapper = Condition.getQueryWrapper($!{table.entityPath}, $!{entity}.class);
    IPage<$!{entity}> pages = $!{table.entityPath}Service.page(Condition.getPage(query), queryWrapper);
    return R.data(pages);
    }
/**
 * 新增 $!{table.comment}
 */
@PostMapping("/save")
@ApiOperationSupport(order = 7)
@ApiOperation(value = "新增", notes = "传入$!{table.entityPath}")
public R save(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
    return R.status($!{table.entityPath}Service.save($!{table.entityPath}));
    }

/**
 * 修改 $!{table.comment}
 */
@PostMapping("/update")
@ApiOperationSupport(order = 8)
@ApiOperation(value = "修改", notes = "传入$!{table.entityPath}")
public R update(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
    return R.status($!{table.entityPath}Service.updateById($!{table.entityPath}));
    }

/**
 * 新增或修改 $!{table.comment}
 */
@PostMapping("/submit")
@ApiOperationSupport(order = 9)
@ApiOperation(value = "新增或修改", notes = "传入$!{table.entityPath}")
public R submit(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
    if ($!{table.entityPath}Service.saveOrUpdate($!{table.entityPath})) {
    return R.data($!{table.entityPath});
    } else {
    return R.data(HttpServletResponse.SC_SERVICE_UNAVAILABLE, $!{table.entityPath}, ToolConstant.DEFAULT_FAILURE_MESSAGE);
    }
    }

#if($!{superEntityClass})

/**
 * 删除 $!{table.comment}
 */
@PostMapping("/remove")
@ApiOperationSupport(order = 10)
@ApiOperation(value = "逻辑删除", notes = "传入ids")
public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
    return R.status($!{table.entityPath}Service.deleteLogic(Func.toLongList(ids)));
    }

#else

/**
 * 删除 $!{table.comment}
 */
@PostMapping("/remove")
@ApiOperationSupport(order = 11)
@ApiOperation(value = "删除", notes = "传入ids")
public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
    return R.status($!{table.entityPath}Service.removeByIds(Func.toIntList(ids)));
    }

#end
/**
     * 数据源列表
     */
@GetMapping("/select")
@ApiOperationSupport(order = 12)
@ApiOperation(value = "下拉数据源", notes = "查询列表")
public R<List<$!{entity}>> select() {
    List<$!{entity}> list = $!{table.entityPath}Service.list();
    return R.data(list);
    }

#if($istree)
/**
    * 获取菜单树形结构,
    * 如果parentId为空，刚返回所有的数据
    */
@GetMapping("/tree")
@ApiOperationSupport(order = 13)
@ApiOperation(value = "树形结构", notes = "树形结构")
public R<List<$!{entity}VO>> tree(@ApiParam(value = "父id", required = false)String parentId) {
    List<$!{entity}VO> tree = $!{table.entityPath}Service.tree(parentId);
    return R.data(tree);
    }
#end


    }
